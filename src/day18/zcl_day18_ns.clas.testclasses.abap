CLASS ltcl_day18 DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA cut TYPE REF TO zif_aoc_ns.

    METHODS first_1st_input FOR TESTING.
    METHODS first_2st_input FOR TESTING.
    METHODS first_3nd_input FOR TESTING.
    METHODS first_4rd_input FOR TESTING.
    METHODS first_5th_input FOR TESTING.
    METHODS first_my_input FOR TESTING.

    METHODS second_1st_input FOR TESTING.
    METHODS second_2nd_input FOR TESTING.
    METHODS second_3rd_input FOR TESTING.
    METHODS second_4th_input FOR TESTING.
    METHODS second_5th_input FOR TESTING.
    METHODS second_6th_input FOR TESTING.
    METHODS second_7th_input FOR TESTING.
    METHODS second_8 FOR TESTING.
    METHODS second_my_input FOR TESTING.

    METHODS get_my_input
      RETURNING VALUE(result) TYPE string_table.
ENDCLASS.


CLASS ltcl_day18 IMPLEMENTATION.
  METHOD first_1st_input.
    DATA(input) = VALUE string_table( ( |1 + 2 * 3 + 4 * 5 + 6| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 71 act = cut->first( ) ).
  ENDMETHOD.

  METHOD first_2st_input.
    DATA(input) = VALUE string_table( ( |2 * 3 + (4 * 5)| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 26 act = cut->first( ) ).
  ENDMETHOD.

  METHOD first_3nd_input.
    DATA(input) = VALUE string_table( ( |5 + (8 * 3 + 9 + 3 * 4 * 3)| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 437 act = cut->first( ) ).
  ENDMETHOD.

  METHOD first_4rd_input.
    DATA(input) = VALUE string_table( ( |5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 12240 act = cut->first( ) ).
  ENDMETHOD.

  METHOD first_5th_input.
    DATA(input) = VALUE string_table( ( |((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 13632 act = cut->first( ) ).
  ENDMETHOD.

  METHOD first_my_input.
    cut = NEW zcl_day18_ns( get_my_input( ) ).
    cl_abap_unit_assert=>assert_equals( exp = 5019432542701 act = cut->first( ) ).
  ENDMETHOD.

  METHOD second_1st_input.
    DATA(input) = VALUE string_table( ( |1 + 2 * 3 + 4 * 5 + 6| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 231 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_2nd_input.
    DATA(input) = VALUE string_table( ( |1 + (2 * 3) + (4 * (5 + 6))| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 51 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_3rd_input.
    DATA(input) = VALUE string_table( ( |2 * 3 + (4 * 5)| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 46 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_4th_input.
    DATA(input) = VALUE string_table( ( |5 + (8 * 3 + 9 + 3 * 4 * 3)| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 1445 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_5th_input.
    DATA(input) = VALUE string_table( ( |5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 669060 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_6th_input.
    DATA(input) = VALUE string_table( ( |((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 23340 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_7th_input.
    DATA(input) = VALUE string_table( ( |(5 * 7 * 5) * 6 * 5 + 7 + 6 * 4| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 75600 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_8.
    DATA(input) = VALUE string_table( ( |5 * (7 * 8 * 8) + 4 + 9 + (4 * (3 * 5 * 6 * 7) + 4 * 8 * 4 * 3) + 2| ) ).
    cut = NEW zcl_day18_ns( input ).
    cl_abap_unit_assert=>assert_equals( exp = 1219595 act = cut->second( ) ).
  ENDMETHOD.

  METHOD second_my_input.
    cut = NEW zcl_day18_ns( get_my_input( ) ).
    cl_abap_unit_assert=>assert_equals( exp = 70518821989947 act = cut->second( ) ).
  ENDMETHOD.

  METHOD get_my_input.
    result = VALUE string_table(
( |(5 * 7 * 5) * 6 * 5 + 7 + 6 * 4| )
( |(2 + 3 + (2 + 8) * 3 + (7 + 4)) * 3 + 7| )
( |2 + 4 * (2 + 2 * (9 + 2 + 6 + 3 + 6) + 4)| )
( |4 * 3| )
( |9 + (8 * 5 * 5 * 4 * (3 * 5) * 2) + 4 + 4| )
( |5 + 5 + 2 * 4 + 4| )
( |7 + 9 * 2 + 2 * 3| )
( |5 + 8 + 5 * (6 * 8 * (9 * 2 + 2 + 7 + 4 + 2) + 4 * 6) * 5| )
( |8 * 7 * 4 * 5 + 3| )
( |(9 * 9 + 9 * 7 * 4) + 9 + 5 * (5 + (8 * 8) * (2 * 8) * (5 + 3 + 5 * 5 + 4 + 2)) + 2| )
( |(4 + 7 + 2) + 9 * 3 + 7 * ((8 * 7) + 5 * (9 * 9) * 8 + (8 * 2)) * 9| )
( |8 * 2 * (2 + 5 + (5 * 4 * 2 + 7 + 3 * 4)) + ((4 + 9) + (4 * 8) + (6 * 8 + 6) + (4 * 3 * 9) + 5) * 7| )
( |7 + 2 + 8 * 2 * (2 * (6 * 2 * 4 * 5) * (4 * 4) + 2 + 3 + 2) + 6| )
( |8 * ((6 + 8 * 3 * 9) + 9 + 8)| )
( |7 + ((6 + 3 + 7 + 6 * 7) + 6 * 6)| )
( |5 * (7 * 5 + 4 + 7 * 4 * 4) * (7 + 6 * 4 + 4 + (3 + 3 * 7 + 2 + 8)) * 8| )
( |((3 * 7 * 3 * 9) * 2 + (5 * 2 * 6 * 6 * 5 + 6)) * 4 + 6 * 4 + 7| )
( |2 + (7 + 5 + 9 + 9) * 4| )
( |(9 + 6 + 5 * 5 * 5 + 5) * 9 * 2 + (6 * (8 + 4 * 9) * 5 + 7) * 9 * 5| )
( |9 + 2 + (5 * 6 + 7) + 4 + 7| )
( |9 * (2 * 9 * 4 * 4 + 6 * 6) * 8 * 3 * (4 + 7 + 8 * 3 + 4 + 9) * 9| )
( |2 + 4 + 6 * 6 * (3 * 3 + 6 * 4 * 8) * (5 + (9 * 2))| )
( |9 + (6 + 8) + 7 * (8 * (7 + 6 * 4) + 7) * ((6 * 7) + 8 + 2) * 8| )
( |((6 * 3 * 2 + 8 + 4) * 6 + (7 * 7 * 7 + 3)) * (2 * 5 + 2 * 3) + ((2 + 8 * 5 + 4) + 6 + 6 * (3 + 8 * 9)) * 5 * 4 + 2| )
( |(4 + (3 + 9 * 9 + 9 + 2 * 3) + 6 * 2 * 3) + (7 * 7 * 8 + 6 * 5) * 7 + 8 + (7 + 7 + 4)| )
( |9 + (5 + 5 * 4 * 4 * 3 * 8) * 6 + 5 + 4| )
( |8 * 2 + 9 + 7 + 6 * (3 * 6 * 7 * 6 * 8)| )
( |(7 + 6 * 3 * 3) * 8 + (8 * 2 * 5 + 8 + 2) + 4| )
( |5 + 9 * 5 + 5 * 6 + (7 * 8 * 8 + (2 + 9 * 4))| )
( |((7 * 4 + 2 + 6 + 3) * 4) + 7 + 7| )
( |(7 * 8 + 8 + 3) * 3 * (9 * 5 * 3 * 9) * 5| )
( |6 + (8 + 8 * 7 + 7) + (5 + 7 * 4 * 4 * 5) * 5 * 2 * (5 * 4 * 5)| )
( |2 * (5 * (8 + 5 + 8)) * 5 * ((6 + 9 + 6 + 8 + 9) * 4 + 8 + 7 + (5 * 7 * 2 * 3))| )
( |8 + 9 * 7 + ((6 * 4 + 3 * 9 + 9) * (3 + 8 * 5 * 4 + 5 + 5) * 2 + (2 * 2 * 3 * 9))| )
( |2 * 9 + 4 * (2 * (7 + 8 * 2 * 9 + 2 * 6) * 3 * (6 + 3 * 7 * 7 + 4))| )
( |5 * 3 + (8 * 6 + 7 * 8 + (8 + 3)) * 7 + 3 * 2| )
( |((2 * 7 + 7) * 9 * 8 * 7) * 6 * (6 + 2) * 9| )
( |7 * 6 * (3 * (5 * 7 + 5 * 4) * (4 + 6 + 3) + (6 * 7)) * 3 * 8| )
( |(3 * 6) + 7 * 2 * 6 + 7 * 3| )
( |6 * 3 * ((4 + 8 * 7 + 2) * 3)| )
( |6 + 9 + (3 * 9 * 5 * 8) * 7 + 8| )
( |8 + 6 + 2 * 2 + ((7 + 4 * 9) + 8 * 4)| )
( |6 * 3 * 5 + 7 + 5| )
( |((4 + 5 * 2) + 6 * 7 * 7 * 6) * (7 + 8 * 4 + 9)| )
( |(8 * 5 + 8) * (5 + 4 * (5 * 7 * 4 * 8 + 4 * 4) * 9) + (2 * 2 + (8 + 3) * 4) + (4 * 4)| )
( |6 * (5 * 4 + (5 + 8 * 7)) * 2| )
( |(2 * 2 * 9 + 9 + 8) * (6 * 6 + 8 * (5 * 4) * (3 + 8) + 2) + 5 + 2| )
( |2 * (3 + (5 + 4 * 4 * 2 + 8) + 8 * 2 + 8 + 5)| )
( |3 + 9 * (7 + (2 * 5 * 5 * 4 * 9) * (8 * 3) + 5) * 2| )
( |(2 * (2 * 4 * 7 + 7 + 4)) * 8 * 6 * 7| )
( |(4 * (5 * 2 * 3 * 7) * 5 + (2 * 9) + 6) + (6 + 8 * (4 * 6 * 4) + 2 * 6 * 2) + 6 * 5 + 5| )
( |5 + (7 + 3 + 6 + 9 + 5 + (3 + 9 * 8 + 8 + 7)) * 9 * 9| )
( |3 + 2 + (4 * 6 + (2 * 8 + 6 * 7) + 6) * 9 * 9| )
( |(3 + 2 * (8 + 9 + 8) * 5) * 3 * 3 * ((3 + 9 * 7) + (9 * 8 + 6 * 9 * 9 * 3) * 5 * 7 + 4) + 5 * 4| )
( |7 * 6 + 8 + 2 * (5 + 3 * 5 * 5 * 7 + 8) + 9| )
( |7 + 6 * 6 + (5 + 6) * (8 * 3 + 2 + 9)| )
( |6 * (7 + (3 + 8 * 9 + 4 + 7) + 6 * (2 + 8 + 3) * 5) + 9 * (5 + 5 * 2) + 8 + 3| )
( |(6 + 6 * 9 * 3) * 6 * 3 + (5 * 4)| )
( |6 * 9 * 8| )
( |7 * 4 * (8 + 7 + 7) * 4 * 7 + 4| )
( |5 + 8 * 5 * 7 + 7 + 5| )
( |2 * ((9 * 3 * 7 + 6 * 6) + (5 * 3 * 2 * 8)) * (8 * 3 + 2 * 6) * 6 * 5| )
( |9 + 5 + 6 * 5 + (9 * 4 * (8 + 2) * 6 + 4 * (2 + 3 + 2 * 2)) + 4| )
( |6 * 4 + (2 + 4 + (6 * 9 * 3 * 8 * 6 + 8)) * 4 + 5| )
( |9 + (3 * 5 * 4 * 9 + 6) * 7| )
( |9 + (8 * 2) * (3 * 7 + (7 * 2) * 8) + 5 * (7 + 9 * 7 + 3)| )
( |(5 + 3 + 4 + 8 * 3 * (6 * 5 * 9 * 3)) + 2 * 4| )
( |4 + ((2 * 9 * 2 + 5) * 6 * 5) * (5 + 2) + 7 * 5 + 5| )
( |8 * 3 * (9 * 3 + 5 * (5 * 4 * 3))| )
( |8 * ((3 + 8 + 5) + 6 + 9) + 7 + 4 * 5| )
( |(9 + 9 + 7) + (7 * 2) * (7 * 3 + (5 + 2 * 3) * 9 * 3) + ((2 * 6 + 2 + 7 + 8 * 2) * (2 + 3) + 4)| )
( |(9 + 8 * 9 * (7 + 7) + 5 * 7) + 9 + 2| )
( |3 + (8 * 5 + 9) + 2 + 8 + 8| )
( |5 + 2 + (5 * 8 * 3 * 7 * (3 * 7 + 6) * 4) * 3| )
( |((7 * 9 + 3 + 2) * (9 + 9 + 7) + 4 * 4) * 7| )
( |(7 * (3 * 8 + 3) + 4 + 6 * (4 * 7 + 9)) + ((4 * 6 * 6 * 9) * (6 + 3 + 2 * 8 + 5 * 7) + 3 + 2 * 2 + 3) * 2 + (6 + 4 * (6 + 7))| )
( |7 * (6 * 7 + 6) + 2| )
( |4 * (3 * 4) + 9 + 8 + (4 + 5 + 9 * (7 + 9 + 5) + 7 + 2)| )
( |7 + 2 * 5 + (4 + (8 + 3 * 3 + 6) * 5 * 7) + 6 + 3| )
( |(4 + (9 + 8 * 7 * 7) * 3 * 6) * 7 + 9 * 7 + 5| )
( |2 + 4| )
( |(2 * (8 + 3 + 8 * 2 + 7 + 3) + 7 + 7 + 6) * 3 * 7 * 7 * 2| )
( |9 + 6 + 2 + (5 + 5 + 2 * 3) + 9| )
( |3 * (6 * 8 + 2 * 8 + 7 * (3 + 3 * 4 + 2 + 7)) * (4 + 4 + 6 * 2 * 4 + 4) * 8| )
( |5 + (5 + 8) + (2 + (7 * 9 * 2 + 8) + 6) + 9 + 3| )
( |9 + 5 + (8 * 4 * 3 + 4) + (6 * 3 * 9) * 3| )
( |(5 * 7 * (7 * 7 * 6) * (8 + 2) + 8 * 7) * 3 + 7| )
( |8 * (6 + 6 * 4 + 9 + 4) * 3 * 6 * 8 + 6| )
( |5 * 5 + 2 * (5 * 2 * 9 + (6 + 7)) * 7| )
( |(5 * 6 * 5 * 3) * 2 + (8 + 6 + 9 * 7 + (2 * 3 + 3 * 8 + 5 + 2))| )
( |8 + 7 * ((6 + 4 + 4 + 8 + 7) + 2 * 5 + 3 * 9 + 6) * (3 * 5 * 5 * 9 * 4) * 3 + ((3 + 4 + 2 * 3 * 2 + 2) + 7)| )
( |(8 + (9 * 6 * 3) * (9 + 8 + 3) + 4) * 5| )
( |4 + (4 + 2 + 7 + 9 * 3 * 7) + 9 * (5 + (9 + 9 + 7 + 8 + 8) * 7 + (2 + 2 * 9 + 3)) + 3| )
( |4 + 5 + 5 * (6 * 6 + 3)| )
( |(7 * 7 + 6 * 7 * (4 * 2 + 9 + 7)) + 8| )
( |(4 * 7 + 9 * 6) * 6 * 4 + 8 * (6 + 7 * 9) * 2| )
( |7 + (8 + 9) * 6 * 3 + 4| )
( |8 * (7 * (7 * 3 + 3) + 3 * 5 * 9 * 2) * 6 * ((2 + 4 * 5 * 2 + 5 + 3) + 4 + (4 * 2) * 2 * (9 + 5 + 3 + 7) * 5) + (5 + 5 + 3 + (6 + 6 * 2 * 8 + 6))| )
( |6 * 6| )
( |8 + 5 + 5 + (8 + (3 * 5) + 5 * 3) * 2 + 5| )
( |((4 * 7 * 3) * 7 + 2 * (6 + 2) * 8) * 8| )
( |(6 + 3 * 5 * 5 * 6 + 2) * 3 * 7 * 6| )
( |6 + (9 * (4 * 8 * 5 * 3 + 6 * 9) * 4 * (8 + 3 + 3 * 4) * 6 + 4) + 4 * 2 + 9| )
( |((5 + 4 + 6) + 7 * 8 + 7) + 8 + 9 * 8 + 3| )
( |(4 + 2 + 5 + 4 * 7 * 9) * (7 + (2 * 9) * 8) + 3 + 5| )
( |(3 * 6 + 8 * 8 + 2) * 6 + 4 + (7 + 2 + 6 + 2 * 7)| )
( |8 + (2 * 9 + (3 + 4 + 3) + 2)| )
( |5 + 2 * (5 * 9 * (6 * 8 * 3 + 6) * 8 * 5 + (5 * 4)) + 9| )
( |6 + ((8 * 3 + 5 + 9 * 9) * 3 + 6 * 9) * (5 + (5 * 4 * 8 + 5) * 4 * (3 * 2 + 7 * 7 * 4) + 2 * 2)| )
( |9 + 4 * (2 * (6 + 9 + 6 * 8 + 7)) * 9 * 2| )
( |4 + 8 + (8 + 5 * 8 + 7)| )
( |8 * (2 + 4 + 5 + 7 * 6) * (4 + 9 * 4 + 7 * 2 * 7) * 6 + 9 + 4| )
( |8 + 3 * 8 * (2 * 5 + 5 + (5 * 2 * 6 + 3) + 6) * 9| )
( |((4 + 5 * 7) * 9 * 8 * 2 + 6) + 9 + 7| )
( |((4 + 3 * 6 * 3 * 4 * 7) + 3 * 5 * 4) + 9 * (8 + 7 * 2 * (2 + 8) + 9 * (2 * 8)) * 5 * 5 * 8| )
( |2 + (5 + 6) * 4 + (9 + 5 * 5 * 7 * 5 + 2)| )
( |6 + 6 * (6 * 3 * (2 + 3 + 4 * 3 * 7) * 3 * (4 * 9) * 5) * 9| )
( |7 * 2 * (9 + 8 + 3 * 9 * 4) + 8| )
( |(9 * 8 * 2 + 7 * 2 * 8) * 4 + 9 + (3 + (3 + 3 * 5 + 2) + 9 * 4 * (5 * 3 + 2)) * 6| )
( |7 * 2 * 9 + ((5 * 5 * 8 * 4 + 3 + 7) + 8 + 2 + 3 + 6) * 5 * (8 + (5 + 6 + 7 + 6 + 8 * 6) * 6)| )
( |5 + 6 * ((3 * 7 * 2 + 6 * 9) * 6 + 2 * (8 * 5 * 5 + 9 + 8)) * 6 + 4 * 7| )
( |7 + 7 + 9 * 6 * 4 + 3| )
( |4 + (3 * 8 + 8 + 2) * 8 * (9 + 3 + 7) * (4 + 7 + 2 + 5)| )
( |9 * 2 + 5 + 6 * 6 + (3 + 9 * 6)| )
( |(6 + 3) + 5 + (4 * 6 + 8) * 6| )
( |9 * (6 + 6 * 7 + 6) * 7 * 3 * 5 + 4| )
( |(7 + 8 + 8 * 2 + 5) + 7 + 2| )
( |(5 * 4 + 8) + 9 + (3 + (8 + 2 * 5 * 7) * 9 + 3) * 7| )
( |(2 * 3 + (7 * 4) + 8 * (6 + 4 + 7 * 4 + 5 + 4)) * 7 * 9 * 8 + (3 + 6 + 6 + 9 + 2)| )
( |2 * 2 * (3 * (5 + 4 * 4 + 9 + 7) + 5 * 8 * (7 + 2 * 2))| )
( |2 * 5 * 8 + 6 + (2 + 3 * (7 + 4 + 4)) * 6| )
( |3 + 3 + 2 + 8 + (4 + 9 * (5 + 7 * 3 * 8 + 4))| )
( |(6 * 8) * 5 + 5 * 8| )
( |2 * 3 * 9 * (3 * 7 + 6 + 9) + 2 + 6| )
( |5 * 8 * (2 * 3 * 7 + 3) * 7| )
( |2 + (5 * 5 * 8 * 7 + (3 * 9) * (3 + 8 + 3)) * 5 + (6 * 2 * 9 + 3 + (4 + 4 * 7 + 6 * 6 + 8) + 9) + 5 + 9| )
( |(3 * 5 + 7 + 5 + 5 * 7) * (2 + 4 * 4) + 5 * 6 + 9| )
( |4 + 4 + ((9 * 3 + 5 + 4 * 7) + 6 * 6 * 2 + 9 * 2) * 9 * 9| )
( |7 * (4 + 7 + (5 + 5 * 8 + 8 * 3 * 3) + 7 * 7 + 7)| )
( |2 + 9 + 2| )
( |((9 * 8 + 4 * 3 + 6 + 6) + (4 * 2) + 2 * 9 + 4) + 6 + 7 + (3 + 8 * 9 * 8) + 2 * 2| )
( |(3 + 6 * (9 * 6) * (2 + 6 + 7 * 4) * 7 * 3) * 9 + 8| )
( |4 + 7 * (2 * 2 + 6) * (2 + 4 + 6 * 5 + 6)| )
( |(8 * 7 * 4 + 7 * 5 + 7) + 6 * 2| )
( |2 * 2 + 3 * (4 + (3 + 9 * 3)) * 4| )
( |6 + 5 * 5 + 9 + ((7 + 6 + 2) + (2 * 6 * 2 * 5) * 7 * 4 * 3 * (6 * 4)) + 9| )
( |3 + 2 * ((9 + 2 + 2 + 6 * 9 + 4) + 5) * 8 * 9| )
( |(8 + 4) + 2 + (2 * 2 + 8 * (5 * 6 + 6 * 4 + 9) + 8) + 2 * 8 + 2| )
( |2 * 5 * 7 * 6 * (8 * (2 * 7 * 4 + 6) + 3 + 9 * (8 * 3 + 2) * 8)| )
( |4 + 3 + 4 + (6 + (6 + 4 + 7) + 4 + 7) * 6| )
( |8 + 5 + (9 * 6 * 6 + (3 * 9 + 3 + 6 + 9))| )
( |((3 + 6) + 6 * 3 + 3) * 2 + (9 * (8 * 7) + (2 * 9 * 6) * 6 + 2) * 8 + 2| )
( |((7 * 4 + 7 * 4 + 2 + 7) * 3 * (7 * 8 * 4 + 8 + 4 + 4)) * 6| )
( |6 * 4 * (8 + 5 + 2)| )
( |(8 + 5) * 2 + 4 + 6 + 3| )
( |((4 * 5 + 7 * 2 * 8 + 9) + 4) + 7 + 3 * 8| )
( |2 + 2 * 3 + 7 * (3 * 6 + 9 + 5 * 7 * 5)| )
( |8 * (9 * 8 * 7 + 9 * 6 + 9) + 9| )
( |5 * (4 * 3) * 6| )
( |5 * 6 * 8 * (2 * (4 + 5) * 4) + 3| )
( |4 + 8 * (2 + 6 * 8 * 7 + 9 * 3) + 5| )
( |2 * 3 * 7 * (2 * (7 + 7 + 8) + 8 * 7 + 6 + 2) * 7 + ((4 * 2 * 3) + 9 * 7)| )
( |9 + 6 * 6 + (3 + 4 * 3 + 9 + 5 + 3) * 4| )
( |(2 * (4 + 3) * 9) * (2 + 9 * (6 + 6 + 3 * 5 + 2 + 4) * (2 + 5 + 4 + 7) + 2 + (4 + 4 * 8 * 7 * 7)) + (3 * 7 * (3 + 3 + 3 + 2) * (6 * 3 * 8)) * 4 + 4| )
( |(4 + 7) + (3 * (5 * 3 + 5 + 9) * 9 * 3 * 9)| )
( |9 + 7 * ((2 + 2 * 8 + 7 + 6 * 5) + (6 * 7) * (3 + 6 + 8 * 5) * (8 * 8) * (3 + 3 * 7 + 4 + 7))| )
( |9 + 9 * (3 * (6 + 7 * 9 * 7 + 3)) + 3 + 6 + 9| )
( |2 + ((3 + 7 * 8 + 9) + (8 + 8 * 9)) + 6 + 7 * 8| )
( |4 * (6 + 8 * 8 + 4 * (3 * 2))| )
( |(5 + 5 * 3 * 3 + 3) * 7 + 7 + 3| )
( |2 * (2 + 6 + 4 * (3 + 4 + 7 * 8 * 9 + 9)) * 9 * 7| )
( |(4 + 6 + 7 + 4) * 7 * ((4 + 9) + 8 + 5 * 7)| )
( |8 * 6 + 6 + 7| )
( |(5 + 3 * 2 + (4 * 4 + 5 * 4) + 3) + 7 + 8 + 8 + 7 * 3| )
( |4 + (7 * 5 + 6 * 7 + (2 * 7 * 8) * 3)| )
( |7 * ((3 * 3 + 2) + (8 + 6)) * 4 + (7 * 7) * 8 * 7| )
( |((5 * 8) * 6 + 8) * 5 * 7| )
( |3 * 3 + 5 + ((2 * 4 + 3 + 8 + 8) + 2 + (7 * 9 * 6) * 6 * 6)| )
( |7 + 7 + 5 + 4 * ((5 + 8 * 8) + (2 * 2 * 2 * 6)) * 6| )
( |(4 + 6 + 7) + 2 + 3| )
( |(8 + 8 + 2 + (4 + 6 * 4 + 9 + 9 + 4) * 6 * 4) + 9 * 4 + (9 * 7 + 5 * (3 * 9 + 4 + 7) + 7 * 4)| )
( |8 + (8 + 5) * (8 * (3 + 3 + 5 + 9))| )
( |8 + (4 + (7 + 8 + 4 + 9 + 4) * 7 + (5 * 9 + 2 * 6 + 6) + 4 * (7 + 2))| )
( |(3 * 7 + 8 + 6 * 3) + 5 * 5 + 7 * (9 + 5 + 7 * 8)| )
( |(9 + 7 + 2 + 2) + 4 * 4 * 9| )
( |2 + (4 + 4 + (8 * 9 * 2 * 7 * 2) * 8 * 5) * 5 + (4 + (3 + 2) * (3 * 2 * 9 + 9 * 8 + 5) + 2 * (3 * 4 * 7 * 5 * 6 + 7) * 5)| )
( |(2 * 6 * 9 * 7) + (4 * (4 + 3) + 9) * 9| )
( |4 * 3 + 5 + (6 * 6 * 3 * 9 * 7) * 7 * 4| )
( |8 * 6 * (2 * 6 * 2 * 7 * (6 + 4)) * 4 + 5| )
( |4 * 9 + 7 * 6 * ((9 + 7 * 5 * 5) + 7 * 9)| )
( |3 + (8 + (5 * 2 + 8 * 7 + 6 + 3) + (7 + 9 * 2 + 3) * 6 * 7)| )
( |4 * 7 * 4 * (4 * 5 + (7 + 6 * 7 + 8)) + 4| )
( |(8 + 5 * 3) + ((8 * 7 + 6 * 5 + 8 + 9) * 5 + 2 + 7 + 8 * (5 + 7 + 4 + 4)) + 3 * 9| )
( |6 * (7 + 2) + 4 + 7 * 2 * 5| )
( |(2 * 9 * 9 * (3 * 4)) * 7 * 4 + 2 + 4| )
( |(8 + (9 * 2 * 8) + (5 * 9 * 5) + (5 * 6 * 3 + 8 * 2 + 6) * 5 * 5) * 6 + 8 + 3 * 3 * 2| )
( |2 * 5 * 7 * 4| )
( |(2 * 8) * (2 + (4 + 2 * 5 + 2) * (2 + 7 + 6) + 5 + 5 + 7) * 4 + 8 * 7| )
( |(8 * 5 + 4) * 5| )
( |(9 * 6 + 8 * (3 * 8) + 5) + (8 * (3 * 9 + 7 * 3) + 9 + 2 + (4 + 5 * 7 + 6 * 9)) * 6 * 8| )
( |5 * 4 + 3| )
( |(8 + 7 * 9 + 5 * 5) + 9 + 3 * (6 + 6 + 5)| )
( |(3 * 7 + 2 * 4 + 4) + 8 * 6 + 3 * 5| )
( |((4 + 8 + 8 * 7) + 9 * 7 + 8 + (8 + 3 + 2) * 3) * 2 + (6 * 7) + 8| )
( |(7 + (3 * 5 * 7 * 6) * 7 + (8 * 3 + 9 + 8 * 9 + 8) + 8) + 9| )
( |((6 * 7 * 7 + 4) * 8 + 6 + 4 + 9) + 7 + 4 + 2 + 5 + 5| )
( |4 * (2 * 2) + 2 + 3 * 3 + (4 + 2 + 2)| )
( |((4 * 8 + 8 + 9 + 3 + 3) * 9 * 9 + 7 * (6 * 5 * 3 + 3 + 3)) + (9 * 5 * 2) + (2 + 7 + 6) * 3 * 6| )
( |(4 * 5 * (8 * 7 + 8 + 4 + 3 * 9) * 3 + 7 * (3 + 4 + 3)) + 3 + 6 * ((6 + 2 * 8) * 9) + 2 + 4| )
( |7 * 3 + 8 + (8 + 2 * 9 * 2 * (7 + 4 + 7 + 7 * 7 * 8)) * ((4 * 6 + 7 + 4 + 6) + 5 + 3 + 6 * 6 * (6 + 2 * 9 + 6 * 7 + 3)) * 5| )
( |(7 * 8 + 2 * (5 * 7) + 7 * 4) * 8 + 2 * 3| )
( |4 + (8 * 3 + 9 * 9 * 3) + 7 + 7 + (3 * 4)| )
( |(4 * (5 + 9)) * 9 + 5 + 7| )
( |6 * 2 * 9 + 4 + 6 * 2| )
( |(7 + 3) * ((3 * 7) + 8 + (8 + 6 * 2 * 8 * 6 + 2)) * (7 + 9)| )
( |9 * 4 * 3 + 7 * 6 + (3 + 8)| )
( |4 * ((2 * 6 + 3 * 4) + 3 * 4) * 7 + 8| )
( |(8 + 7 * (4 * 8) * 6) + 7 + 4 * 4 * ((8 * 9 * 7 * 9 + 7 + 3) + 6 + 8)| )
( |5 * (9 + 3 * 4 * (2 * 9 * 4 * 2 + 3) * 8)| )
( |4 * 9 * 8 * 7 + (6 * 9)| )
( |(4 + 4 + 3 + 5) + 9 * 4| )
( |9 + (4 + 7 + 6 + 4 * (8 * 9 * 7 * 3 * 2 * 6)) + 3 * 6| )
( |5 + 6 + (6 * 5) + 8 + 7| )
( |(9 + 4 * 8 * (8 * 7 * 2 + 4) * (5 * 4 + 9)) + 6 + 5| )
( |5 * 2 + 9 + ((3 + 2 * 9 + 3) * 5 * 9 + 2 + 3) * 8 + 5| )
( |(6 + 8 + (3 + 8 + 4 * 4) + 6 * 9 * 3) * 7 + 3 + (5 * 9 + 2 + 7 + 6 * 8) + 5 + (3 + 2 + 2 + (3 + 4 + 2))| )
( |9 * 3 + 7 + 6 * 7 + 3| )
( |(2 * 4 * 3 * 7 + 5) + 6 + (2 + 7 + 4 + 3 * 4) + ((7 * 2 + 7 + 6 * 8) + 6 * 2 * 5)| )
( |((2 * 4) + 3 + 6 + 6 * (7 * 4 * 6 * 5)) * 3 * 6 + (9 * 5 + 8)| )
( |(4 * 3 * 4 * 4) + 5 + 8 + ((8 + 6 + 8 * 9 + 7 * 5) * (6 * 2 * 3 * 6 * 8) * 3) + 8| )
( |(3 * 8 * (8 + 4 * 2 * 9)) + 4| )
( |3 + 7 * 7 + 3 + 9| )
( |((4 * 7 * 2) * 2) + 2 + 9 * 3 * (9 * 3 + (8 * 5 * 9 * 9) * 6)| )
( |9 * 6 * 4 + 5 + (6 + 5 * 4 * (8 + 9))| )
( |2 * (2 * (6 + 2 * 2 + 9 + 6) + (8 + 8 + 7) + (6 + 8 + 7)) * 2 + 5| )
( |5 * 8 * 2 + (7 * 7) + 7 + 6| )
( |6 + (5 * 9 * 7) * 3 * 7| )
( |3 + 9 * (4 + (5 * 8 + 4 + 4 + 5))| )
( |4 * 7 * (8 * 2 + (3 * 8 + 9 + 2 + 6 + 6))| )
( |(9 + 3) * 6 * 9 * 2 * 8 + (7 * 8)| )
( |(8 * 2 + (5 * 8 + 6 * 9 * 8 * 3)) + 9 * ((9 + 6 + 3) * 6 * 4 * 4 * 5) + 8| )
( |3 + 3 * (3 * 6 + 8 + (8 * 7) + 5) + 7| )
( |5 * 3 * 2 * 3 * (4 + 9 + 8 * 9)| )
( |(8 * (9 + 5 * 8) + (6 * 8) + 2 + (8 + 3 + 4 * 5 * 3) + 4) * (4 * 4 * 9 + 9 * 6) + 6 + 3| )
( |2 + (5 + 8 * (5 + 4 * 7 * 4) + 4 * 7 + 5)| )
( |5 + ((6 * 9 + 5 + 5) + 2 * (4 + 4 + 2 * 6 + 3 + 9)) * ((3 * 5 * 2 * 8 * 5) + 2 * (4 + 9 + 5 * 9 * 8) + (2 + 6 * 6 * 5 + 3 + 9)) * (2 + 9 * 9) + 2 * 6| )
( |5 + 2 * ((7 + 4) * 3 * 6) + 7| )
( |4 + 3 * 6 * 8| )
( |(8 + 7) * 5 + (2 + 5 + 3 + 4 * (3 + 7) + 3)| )
( |(2 * 2 * 7) + 2 * ((4 * 5 * 2) * 5 + 9 * (7 * 4 + 2 * 2 * 9) * 9) + 9| )
( |3 + 6 * (7 * 7 * 2) + 6| )
( |6 + (2 * 7) * 4 * ((3 * 2 * 4) + 3) + (7 + 2 * 7 * (5 * 2 * 3 * 3 + 8) + 7 + 7) * 8| )
( |(5 * 3 + (8 * 8 * 5 + 3 + 2) + 6) * 5 * ((5 + 2) * (9 * 7 * 2 * 3 * 6) * 6 * (9 * 5 * 5 + 3 + 9) + (9 + 3 * 5))| )
( |9 * 4 * 7 * 3 + (5 + 2 * 6 + 9) + (2 * 4)| )
( |(4 * (9 + 3 * 7 + 7 * 5) + 2) + 6 * 4| )
( |8 + 5 * 6 * 2 * 2 + (8 * 4 + 6 * 9 + 2 * 5)| )
( |4 + (9 * 4) * 5 + (2 * 8 * 7)| )
( |7 * (3 + (4 * 3 + 8 * 3 * 3) * 5 * 4)| )
( |9 + 7 + (3 * 3 * (7 * 4) + (9 * 4 + 3 * 6 + 6 * 7) + 9) * 2 + 5| )
( |8 + 6 * 9 * 4| )
( |8 + 3 * (9 + (3 * 7 + 3 + 9 + 3) * 9) * 4 + 8| )
( |4 + ((6 * 4 + 4 * 2 * 6 * 5) + 2 * 2) + (4 + 5 + 8 * 5 * 5) * 3 * 5 * 7| )
( |(9 + 8 + 6 * 5 * 5) * 4 + (8 * 3 * 5) * (9 + (3 + 9 + 5 * 3 * 6 + 6) * 7 + (8 * 8 + 8) * 2 + 4)| )
( |(8 * 6 * 2 + 5) * 9 + 6 * 2 * 5| )
( |2 * 5 * 3 + 7 + 6 * 6| )
( |(3 * (4 * 9 + 6 * 2) * 8 + 8) + 7 * 5 + 9 + 2 * 2| )
( |8 + (8 * 4 + 6 * (7 * 7 + 3 * 4 * 7 + 2))| )
( |3 + (7 * (4 * 8 * 8 + 3 * 9) + 2 * 9) + 6| )
( |8 * (6 * 9) * 7 + (9 + 2 * 9 * 7) * (3 + 7)| )
( |((6 + 7 + 4 + 8) * 5 * 7 + 3 + (8 * 2 * 5 + 9)) + 5 * 2 * 9 * 4| )
( |3 * (7 * 7 + 6) * 3 * (5 * (7 * 2 + 6 * 9 + 9) + 3 + 6 * 9 * (2 * 3 * 6 * 9)) * 6 * 5| )
( |(2 * (9 + 4 + 4 + 5 + 5) * (6 * 7 * 4 * 9) * (9 + 4 + 8 * 4) * 3) * (9 + 3 + 3 * 3 * 4 * 2) * 5 + 2 + 5 + 3| )
( |(7 * 8) + (8 * (3 * 8 + 4)) + 3 * 7 * 7 * 6| )
( |2 * 6 * (6 * 3 * (2 + 8 * 5 * 3 + 3 + 4)) * 5 + (9 + 9 + 2 + 3 * 3)| )
( |5 + 7 + 4 * 2| )
( |4 * 3 + 7 + 9 + (5 * 2 + (5 * 6) + 3 + 4) + 6| )
( |8 * 4 * (9 + 3 + (7 * 8 + 7 * 6 + 4 * 3)) * (6 + 9 + 9 * (3 * 7 * 9 + 2 + 2 + 2) * 6 + 4) + 8| )
( |(5 + 9 + (8 + 7 + 6) + 8) + 6 + 2| )
( |2 * (9 + 3 + 4 + (5 + 5 + 2 * 2 + 3 + 8) + 9) * 6 * 7 * 2| )
( |5 * (6 * 7 + 2) * 9 + 7 + 4 + 3| )
( |9 + ((4 * 4 + 3 + 8 * 6 * 7) * (8 * 4 + 9 * 4 + 8) + 6 + (9 * 3 + 5 + 7 + 9 + 3))| )
( |6 * (3 + 8 * (5 * 7 + 5 + 8)) * 5 * 4 + 8 * 3| )
( |7 * (3 * (7 * 4 * 8) + 4 + 3 * (2 * 3)) * 4 + (7 + 6) * 9| )
( |(3 + (5 + 4 + 3 * 3 * 2 + 9) + 7 + 2) + 6| )
( |3 * (5 + (3 + 3 + 4 * 5 * 8 * 9) + 9)| )
( |4 * (6 + 4) + (8 * 4 * (8 + 8 * 7 * 8 * 4) * 8) * 7| )
( |(9 * (4 * 5 + 9 * 6 * 7 + 4) + 4 * 3) * 5 + 7 + 7 + 9| )
( |5 * (7 * 8 * 8) + 4 + 9 + (4 * (3 * 5 * 6 * 7) + 4 * 8 * 4 * 3) + 2| )
( |4 * 6 + 8 * ((3 + 4 * 3) + 6 + 3 + 2 * 5)| )
( |6 * (2 + 4 * (7 * 4 * 4 + 4 + 6) * 4) + ((9 + 7 * 6 * 7) * 8) * 7 * 3 * 9| )
( |3 + (3 + 2 * 7 * 6) * (5 * 2 + 2 * 2) * 2 * (5 * 2 + 3) + 8| )
( |6 * 2 * (8 * 9)| )
( |7 * 4 + 9 * (9 * 2)| )
( |(2 * 6) + (6 + 7 + 5 + 8 + 4)| )
( |6 + (9 * 5 * 6 + 5 + 6 * 6)| )
( |(5 + 9) + 2 + (5 * 7)| )
( |7 * 7 + 4 + (4 * 3) * 8 * (4 * (3 * 3 + 6))| )
( |7 * (8 + 5 + (3 + 7)) * (4 + 4 + 8 + (7 * 7 * 6 + 9)) + 6 * 8 + 8| )
( |4 + (8 + (5 + 2 * 7 + 6 * 7 * 6) + 5 * 9)| )
( |8 + (6 + 3 * 7 * 8 + 8 * 7) + 8 + 5 + 8 * 9| )
( |7 * (7 * (3 + 3) * 6 + 9 * 7 + (2 + 3 + 6 * 8 * 6)) + 3 * (7 * 9)| )
( |(5 * (4 + 6) * 4 * 8 + 6 * 3) + 6 + 2 + (8 * 5 + 9 * 3 + (5 + 7 * 5 + 7) + 3)| )
( |(2 * 7 + 3) + 9 * 8 * 7| )
( |(4 * 3 + 9 * 5 + 4 + 4) * 9 + (3 * 9 * 7 * 4) * (3 + 5 * 4 + 6 + 5) + ((7 + 6 * 7 * 4 + 5) + 2 * 7 + 8) + 8| )
( |(7 * 4 * 4 + 7) + (6 * 9 * 7) + 5 + (3 + 5 * 9 * 4 * 9 * 2) + 4 * 7| )
( |(4 + 2 * 2 * 8 + 5 * 3) + 4 * 5 * 3 * (4 * (2 * 3 + 2 * 8 + 2) + 4 * 9 * (6 + 3 * 7 * 3) * 5) + (7 * 8 * 9 + 3 * 9 * 4)| )
( |8 + (3 + 3 + 2)| )
( |6 * (3 * 6 * (3 + 5 + 8 + 5 + 5))| )
( |(9 + 7 * 9 + (3 * 4 * 2 * 2 * 7) + 5 + 9) + 7 + (9 * (8 * 9) * 9) + 3| )
( |(9 * 6 * 8 * 2) + (6 + (9 * 5 + 6 * 5 + 5 + 5) * (6 + 7 * 8 * 4 + 4 + 6) + 9) + 9 * 7 * 4| )
( |4 + (3 * (3 + 4)) * 8 + 4 + 2| )
( |((9 * 2 * 5 * 3 + 9 + 3) * (7 * 6 * 9 * 8 * 2) * 8 + 4) * 6 + 8 * 6 + 9 + (4 * 3 + 2 * 9)| )
( |(8 + 5 + (6 * 7 * 2 * 4 * 8)) * (9 + 8 + (4 + 8 * 2 + 8 * 4) * 9 * 8 * 9) + 7 + 9 + 7| )
( |(5 + 2 + 3 * 5) * ((9 * 8) * 8 * 2 * 6 + (9 * 4 * 7)) + (5 + 3 * (5 + 7 + 6 * 4 + 8 + 5)) + (7 + 6 * 2 + 2 * 6 * 7) + 2| )
( |7 * 2 + 7 + 8 + (9 * 9 + 8 * 6 + 7 * 7) * (7 + 3 + 5 * 4)| )
( |5 * (5 + 2 + 6) * 2 + (7 * 5 + 4 + (8 * 9 + 8 * 9 + 8) + 3)| )
( |4 + (3 + (4 * 4) + 8 + 8 * 9 + 7) * (4 * 4 * 2) + 8 * 5| )
( |6 + 4 + ((5 + 7) + (8 + 9 * 3 + 5 * 9)) + (4 + 8 + 7 * 6) * 5| )
( |3 + ((6 + 2 + 6) * 9 + 8 + (5 + 5) * 6 * (8 + 6 + 7 + 7 + 9 * 9)) + 9| )
( |8 * 8| )
( |(3 + 7) * 2 + 2| )
( |2 * ((4 * 9 + 9 + 5 * 7 * 9) + 8 * 3 + 7 * 7) + ((3 * 4 + 4 + 6 * 9 + 8) * (7 * 2 * 9 + 8 + 5) * 9 * (9 * 3 * 3) + 6)| )
( |(4 + 6 * 5 * 7 * 7 + 6) + 9 + 8 + 8 * 3 * 8| )
( |7 * 6 * (3 + 5 + 6 + 4 + 5 + (2 + 2 + 7)) + 6 + 3 * (4 * (3 + 4) * 9 + 3 * (7 * 4 + 3 + 6))| )
( |9 * 5 * 7 + (5 + 2 * 4 * 4 + 9 + 6)| )
( |(6 + 2 * 8 * 6 + (5 + 9) + 3) * 5 + 6 + 4| )
( |6 + 8 + 5| )
( |6 + (8 + (6 * 3 * 5) + 4 + 5 * (5 * 6 * 2) + 8) + 3 + 9 * 8 + 6| )
( |3 + (2 + 9 + 2 * (8 + 2 * 3 * 6 * 9) * 2) * 4| )
( |7 + 4 + (8 + 7 * (3 * 2 * 7 + 2 + 3 * 8)) + 9 * ((5 + 5) + 2)| )
( |2 + (2 * 5 + 5 + 9 + 4) * 2 + 8 + 8| )
( |(2 + 4) + ((9 + 4) * 3 + 7 * 6) + 9 * 6| )
( |(9 * (7 + 5 + 8 + 8) + 8 + 5) + ((5 + 9 + 4 * 7 * 5) * 4 + 6 + 9 * 9)| )
( |4 + 8 + ((6 + 2 + 2 * 6 * 2) + 7) * 7 + (3 + 8 + 4 + 2)| )
( |((4 * 2 * 9 + 5 * 9) * 7) * 9 * (7 * 8 * 6 + 8 * 6 * 8)| )
( |(4 * (8 * 5 * 5)) + 5 + 6 * 2 + (2 + 9 + 7 + 6) * 5| )
( |(6 + 2) + 5| )
( |2 * (3 * 4) * 4 + 6| )
( |2 * 8 * (6 * (7 * 4 * 9) + (2 + 2) * 2 * (6 * 2 + 9)) * (7 * (2 * 5 + 3 * 8 * 4) * (3 + 7) + 6 + 2 * 5)| )
( |3 * 7 + (4 * 3 + 5 + 9 + 2)| )
( |6 * 5 * 3 + 3 * 7 * ((3 * 4 * 3 + 8 + 6) * 4)| )
( |(6 * 6 + 4 + 5 * 5) * 7| )
( |((6 + 8 + 4 + 5 + 9) * 3 + 4 * 5 + 4) * 5 + 9 + 9 * 9| )
( |(9 + 4 * 5 * 5 + (3 * 3 + 5)) * 5 * 4 * 9 + (4 + 5 * 9)| )
( |2 + (9 + 5)| )
( |8 * (8 + 3 * 9 + 7)| )
( |(9 + (4 + 2 * 4 * 6 + 7 * 2)) + 5 * (5 * (3 * 7 + 3 * 8 * 8 * 8) * 9)| )
( |3 * ((4 + 3 * 8 + 5) * 9) * (6 * 5 + (2 + 5 + 4 + 3 + 8 + 2))| )
( |6 + (3 * 3 * 5 + 9 * 8 + 8) * 7 + 9| )
( |(5 * 8) * 2 * ((3 * 5 + 6 * 9 * 3 * 8) + 8 + 4 + 2 + 2)| )
( |(6 + 4 * 6 * 6) * (3 * 6) * 8| )
( |((7 * 8 + 6 * 8 + 2) + 5 * 6) + 5 * 7 * 6 + 6| )
( |4 + 8 * 9 * (2 * 5 * 8 + 9 * (5 * 8 + 9 * 4 + 6 + 4)) + 2| )
( |9 * (7 * 7 * 7 * 8 * 5) + 8 + 4| )
( |4 * 9| )
( |(9 * (7 * 7 * 7 * 9)) + 6 * 7 + 4 * 8| )
( |7 + (5 * 9 + (9 + 8 + 5)) + 4 * 7 + 8 * 5| )
( |6 * 2 + (7 * 9) * 6| )
( |(5 * 4) * (4 + 8)| )
( |9 * 4 + 6 * 5 * 6 + ((8 + 9 + 8) * 8 + 6 + (4 * 2 * 2 + 3 * 6))| )
( |7 + (7 * 2 * 4 + 2 * 5 * 4) * 7 * (9 * 4 * 2 * 7 + 9) + 8| )
( |(6 + 2) + (5 * 8 + 8 + 4)| )
( |(8 + (8 + 8 + 3) * 6 + (6 * 9 * 4 + 7) + 2) + 8 * 8 + 4 + ((7 + 4 + 5 + 8 + 9) + 6 + 7 + 9 + 6) + 3| )
( |((7 + 6 + 3) * 4 + 2 + 5 + 8) * 4 * 2 * 2| )
( |((4 + 6 + 3 + 2 + 2) + 3 * (7 * 6 + 9 * 5 + 6 * 4) * 3) * 3 * (5 + 4 + 3 * 9) * (9 + 3 + 2 + 5 * 7 + 5) + (4 * 2 + 6) + 4| )
( |4 + 4 + ((2 * 4 + 9 * 8 * 5 + 8) * 9 * 9 * 6 + 9) + (6 + (5 + 9))| )
( |3 + 8 * (3 + 8 * (3 * 7 * 4 * 2) + (6 * 9 * 8))| )
( |2 + 5 + ((5 + 4) * (2 + 4) * 9 + 6) + 5 * 9| )
( |7 + 7 + 6| )
( |8 + (7 + 8 + 7 + 7 * (8 + 8 + 9 * 2 + 8 + 2) + (3 * 6 + 3 * 2))| )
( |4 * 9 + (4 * (7 + 7 + 7 + 8 + 5 + 2) + 4 * 6 + 2 + 6)| )
( |(4 * 9 * 7 + 8 + 3 + 9) + 8 + (5 * 9 + 9 + 3 + 3 + 4) * 9 * 8| )
( |(5 + 5 * 6) * (6 + 8 + 7) + (5 + 2 + 5 * 5 * (3 + 7 + 6 * 9)) + 9| )
( |4 * 2 + (4 + 5 + (3 + 5 + 9) + 7 + 7 + 4) + 3 + (6 * (2 + 2 + 8 * 8) + (8 + 9 * 7 + 7 + 6 * 9) + (3 * 9 * 3 * 5 + 5) * 5) * 3| )
( |7 + 2 + (4 * 3) * 7 + (2 * 3 + 7 * 9)| )
( |5 * 9 * 2 * (5 * 2) + 5| )
( |4 + 4 * 6 + (2 + 5 + 6 + 8 * 7)| )
    ).
  ENDMETHOD.

ENDCLASS.
